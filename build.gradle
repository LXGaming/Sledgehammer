import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "gradle"
            url = "https://plugins.gradle.org/m2"
        }
        maven {
            name = "minecraftforge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "spongepowered"
            url = "https://repo.spongepowered.org/repository/maven-public"
        }
    }

    dependencies {
        classpath("com.github.jengelman.gradle.plugins:shadow:6.1.0")
        classpath("net.kyori:blossom:1.2.0")
        classpath("net.minecraftforge.gradle:ForgeGradle:4.1.+")
        classpath("org.spongepowered:mixingradle:0.7-SNAPSHOT")
    }
}

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "java"
apply plugin: "java-library"
apply plugin: "net.kyori.blossom"
apply plugin: "net.minecraftforge.gradle"
apply plugin: "org.spongepowered.mixin"
apply plugin: "signing"

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "io.github.lxgaming"
archivesBaseName = "Sledgehammer"
version = "1.12.2-2.0.14"

blossom {
    replaceToken("@version@", version)
}

minecraft {
    accessTransformer(file("src/main/resources/sledgehammer_at.cfg"))
    mappings(channel: "stable", version: "39-1.12")
    runs {
        client = {
            args("--mixin.config", "mixins.sledgehammer.core.json")
            args("--tweakClass", "org.spongepowered.asm.launch.MixinTweaker")
            properties("forge.logging.console.level": "debug")
            properties("forge.logging.markers": "SCAN,REGISTRIES,REGISTRYDUMP")
            singleInstance(true)
            workingDirectory(project.file("run"))
        }

        server = {
            args("--mixin.config", "mixins.sledgehammer.core.json")
            args("--tweakClass", "org.spongepowered.asm.launch.MixinTweaker", "nogui")
            properties("forge.logging.console.level": "debug")
            properties("forge.logging.markers": "SCAN,REGISTRIES,REGISTRYDUMP")
            singleInstance(true)
            workingDirectory(project.file("run"))
        }
    }
}

mixin {
    disableRefMapWarning = true
    add(sourceSets.main, "mixins.sledgehammer.refmap.json")
}

configurations {
    shadow {
        runtime.extendsFrom(shadow)
    }

    build.dependsOn("signJar")
    jar.classifier = "sponge"
}

repositories {
    mavenCentral()
    maven {
        name = "covers1624"
        url = "https://maven.covers1624.net/"
    }
    maven {
        name = "curseforge"
        url = "https://minecraft.curseforge.com/api/maven"
        metadataSources {
            artifact()
        }
    }
    maven {
        name = "spongepowered"
        url = "https://repo.spongepowered.org/repository/maven-public"
    }
}

dependencies {
    annotationProcessor("org.spongepowered:mixin:0.8.2:processor")
    minecraft("net.minecraftforge:forge:1.12.2-14.23.5.2855")
    shadow("org.checkerframework:checker-qual:3.13.0")
    shadow("org.spongepowered:configurate-hocon:3.7.2") {
        exclude(module: "checker-qual")
        exclude(module: "guava")
        exclude(module: "guice")
    }
    shadow("org.spongepowered:mixin:0.8.2")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.7.1")

    // Sponge
    annotationProcessor("org.spongepowered:spongecommon:1.12.2-7.3.0:dev")
    api("org.spongepowered:spongecommon:1.12.2-7.3.0:dev") {
        exclude(module: "configurate-core")
        exclude(module: "configurate-hocon")
        exclude(module: "commons-io")
        exclude(module: "gson")
        exclude(module: "guava")
        exclude(module: "launchwrapper")
        exclude(module: "mixin")
    }
    api("org.spongepowered:spongeforge:1.12.2-2838-7.3.0:dev") {
        transitive = false
    }
    api("org.spongepowered:spongevanilla:1.12.2-7.3.0:dev") {
        transitive = false
    }

    // Third Party Mods
    api("actually-additions:ActuallyAdditions:1.12.2:r145")
    api("armor-underwear-mod:armorunder:mc1.12.2:1.0.0")
    api("astral-sorcery:astralsorcery:1.12.2:1.10.22")
    api("athenaeum:athenaeum:1.12.2:1.17.4")
    api("barrels-drums-storage-more:BarrelsDrumsStorageAndMore:0.0.24")
    api("bewitchment-legacy:bewitchment:1.12.2:0.0.22.49")
    api("biomes-o-plenty:BiomesOPlenty-1.12.2:7.0.1.2441:universal")
    api("career-bees:careerbees:0.4.0")
    api("carrots-lib:carrotslib:mc1.12.2:1.0.0b1")
    api("carry-on:carryon:1.12.2:1.12.4.16")
    api("champions:champions:1.12.2:1.0.11.3")
    api("cyclops-core:CyclopsCore:1.12.2:1.6.6")
    api("dank-null:DankNull:1.12.2:1.7.89")
    api("ender-io:EnderIO:1.12.2:5.1.55")
    api("ender-storage-1-8:EnderStorage-1.12.2:2.4.6.137:deobf")
    api("flux-networks:fluxnetworks-1.12.2:3.0.19:21")
    api("forestry:forestry_1.12.2:5.8.2.387")
    api("hearth-well:hwell:0.5.2")
    api("immersive-engineering:ImmersiveEngineering:0.12:92")
    api("industrial-foregoing:industrialforegoing-1.12.2:1.12.13:237")
    api("integrated-dynamics:IntegratedDynamics:1.12.2:1.1.7")
    api("journeymap:journeymap:1.12.2:5.7.0")
    api("kubejs-forge:KubeJS-forge:1.12.2:1.1.0.63")
    api("logistics-pipes:logisticspipes:0.10.2.216")
    api("matteroverdrive-legacy:MatterOverdrive-1.12.2:0.7.1.0:universal")
    api("morph:Morph:1.12.2:7.1.3")
    api("mowzies-mobs:mowziesmobs:1.5.8")
    api("mrtjp:ProjectRed:1.12.2-4.9.3.116:mechanical") {
        exclude(module: "jei_1.12.2")
    }
    api("natures-aura:NaturesAura:26.0")
    api("primalcore:PrimalCore:1.12.2:0.6.105")
    api("primitive-crafting:PrimitiveCrafting:1.12.2:1.4.0")
    api("primitive-mobs:primitivemobs:1.2.3a")
    api("pyrotech:pyrotech:1.12.2:1.3.13")
    api("qmd:QMD:0.10.1:1.12.2")
    api("quark:Quark:r1.5:145")
    api("random-things:RandomThings:MC1.12.2:4.2.7.4")
    api("real-filing-cabinet:realfilingcabinet:1.12:0.2.0.20")
    api("ruins-structure-spawning-system:Ruins:1.12.2")
    api("simple-storage-network:SimpleStorageNetwork:1.12.2:1.7.8")
    api("sonar-core:sonarcore-1.12.2:5.0.19:20")
    api("tesla-core-lib:tesla-core-lib:1.12.2:1.0.17")
    api("thaumic-wonders:thaumicwonders:1.8.2")
    api("tomb-many-graves-2:TombManyGraves:1.12:4.2.0")
    api("topography:Topography:1.12.2:1.5.1")
    api("vaultopic-early-inventory-management:vaultopic:2.2")
}

jar {
    manifest {
        attributes(
                "FMLCorePlugin": "io.github.lxgaming.sledgehammer.launch.SledgehammerLoadingPlugin",
                "FMLCorePluginContainsFMLMod": true,
                "ForceLoadAsMod": true,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Implementation-Title": "Sledgehammer",
                "Implementation-Vendor": "LX_Gaming",
                "Implementation-Version": "${project.version}",
                "MixinConfigs": ""
                        + "mixins.sledgehammer.actuallyadditions.json,"
                        + "mixins.sledgehammer.armorunder.json,"
                        + "mixins.sledgehammer.astralsorcery.json,"
                        + "mixins.sledgehammer.bdsandm.json,"
                        + "mixins.sledgehammer.bewitchment.json,"
                        + "mixins.sledgehammer.biomesoplenty.json,"
                        + "mixins.sledgehammer.careerbees.json,"
                        + "mixins.sledgehammer.carryon.json,"
                        + "mixins.sledgehammer.champions.json,"
                        + "mixins.sledgehammer.core.json,"
                        + "mixins.sledgehammer.danknull.json,"
                        + "mixins.sledgehammer.enderio.json,"
                        + "mixins.sledgehammer.enderstorage.json,"
                        + "mixins.sledgehammer.fluxnetworks.json,"
                        + "mixins.sledgehammer.forge.json,"
                        + "mixins.sledgehammer.immersiveengineering.json,"
                        + "mixins.sledgehammer.industrialforegoing.json,"
                        + "mixins.sledgehammer.integrateddynamicscompat.json,"
                        + "mixins.sledgehammer.journeymap.json,"
                        + "mixins.sledgehammer.kubejs.json,"
                        + "mixins.sledgehammer.logisticspipes.json,"
                        + "mixins.sledgehammer.matteroverdrive.json,"
                        + "mixins.sledgehammer.morph.json,"
                        + "mixins.sledgehammer.mowziesmobs.json,"
                        + "mixins.sledgehammer.naturesaura.json,"
                        + "mixins.sledgehammer.platform.json,"
                        + "mixins.sledgehammer.primitivecrafting.json,"
                        + "mixins.sledgehammer.primitivemobs.json,"
                        + "mixins.sledgehammer.projectred.json,"
                        + "mixins.sledgehammer.pyrotech.json,"
                        + "mixins.sledgehammer.qmd.json,"
                        + "mixins.sledgehammer.quark.json,"
                        + "mixins.sledgehammer.randomthings.json,"
                        + "mixins.sledgehammer.realfilingcabinet.json,"
                        + "mixins.sledgehammer.ruins.json,"
                        + "mixins.sledgehammer.sponge.json,"
                        + "mixins.sledgehammer.storagenetwork.json,"
                        + "mixins.sledgehammer.thaumicwonders.json,"
                        + "mixins.sledgehammer.tombmanygraves.json,"
                        + "mixins.sledgehammer.topography.json,"
                        + "mixins.sledgehammer.vaultopic.json,"
                        + "mixins.sledgehammer.wolforce.json",
                "Specification-Title": "sledgehammer",
                "Specification-Vendor": "LX_Gaming",
                "Specification-Version": "1",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0
        )
    }

    exclude("META-INF/*.DSA")
    exclude("META-INF/*.RSA")
    exclude("LICENSE.txt")
}

processResources {
    from("LICENSE")
    rename("LICENSE", "LICENSE-${archivesBaseName}")

    from (sourceSets.main.resources.srcDirs) {
        include("mcmod.info")
        expand("version": version)
    }

    exclude("sledgehammer_at.cfg")
}

reobf {
    shadowJar {
    }
    thinShadowJar {
    }
}

shadowJar {
    archiveClassifier.set(null)
    configurations = [project.configurations.shadow]
    relocate("com.typesafe.config", "io.github.lxgaming.sledgehammer.lib.config")
    relocate("ninja.leaping.configurate", "io.github.lxgaming.sledgehammer.lib.configurate")
    relocate("org.checkerframework", "io.github.lxgaming.sledgehammer.lib.checkerframework")
}

task thinShadowJar(type: ShadowJar) {
    archiveClassifier.set("thin")
    configurations = [project.configurations.shadow]
    relocators = shadowJar.relocators

    dependencies {
        exclude(dependency("org.spongepowered:mixin"))
    }

    manifest {
        inheritFrom jar.manifest
    }

    from sourceSets.main.output
}

artifacts {
    archives shadowJar
    archives thinShadowJar
}

test {
    testLogging {
        exceptionFormat = "full"
    }

    useJUnitPlatform()
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        configurations.archives.allArtifacts.files.each {
            ant.signjar(
                jar: it,
                alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified: project.property("signing.preserveLastModified"),
                tsaurl: project.property("signing.timestampAuthority"),
                digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: " + it.name)

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: " + it.name)
        }
    }
}