import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        jcenter()
        maven {
            name = "minecraftforge"
            url = "https://files.minecraftforge.net/maven"
        }
        maven {
            name = "spongepowered"
            url = "https://repo.spongepowered.org/maven"
        }
    }

    dependencies {
        classpath("com.github.jengelman.gradle.plugins:shadow:5.2.0")
        classpath("net.minecraftforge.gradle:ForgeGradle:3.+")
        classpath("org.spongepowered:mixingradle:0.7-SNAPSHOT")
    }
}

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "java"
apply plugin: "net.minecraftforge.gradle"
apply plugin: "org.spongepowered.mixin"
apply plugin: "signing"

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "io.github.lxgaming"
archivesBaseName = "Sledgehammer"
version = "1.14.4-2.0.0-BETA"

minecraft {
    accessTransformer(file("src/main/resources/accesstransformer.cfg"))
    mappings(channel: "snapshot", version: "20191122-1.14.3")
    runs {
        client = {
            properties("forge.logging.markers": "SCAN,REGISTRIES,REGISTRYDUMP")
            properties("forge.logging.console.level": "debug")
            workingDirectory(project.file("run").canonicalPath)
            source(sourceSets.main)
        }

        server = {
            properties("forge.logging.markers": "SCAN,REGISTRIES,REGISTRYDUMP")
            properties("forge.logging.console.level": "debug")
            workingDirectory(project.file("run").canonicalPath)
            source(sourceSets.main)
        }
    }
}

mixin {
    disableRefMapWarning = true
    add(sourceSets.main, "mixins.sledgehammer.refmap.json")
}

configurations {
    provided {
        compile.extendsFrom(provided)
    }

    shadow {
        runtime.extendsFrom(shadow)
    }

    build.dependsOn("signJar")
    compileJava.dependsOn("filterJava")
    jar.classifier = "sponge"
}

repositories {
    jcenter()
    maven {
        name = "curseforge"
        url = "https://minecraft.curseforge.com/api/maven"
    }
    maven {
        name = "spongepowered"
        url = "https://repo.spongepowered.org/maven"
    }
}

dependencies {
    minecraft("net.minecraftforge:forge:1.14.4-28.1.96")
    shadow("org.checkerframework:checker-qual:2.11.1")
    testCompile("org.junit.jupiter:junit-jupiter-engine:5.5.2")
    runtime("org.ow2.asm:asm-analysis:6.2")
    runtime("org.ow2.asm:asm-util:6.2")
    shadow("org.spongepowered:configurate-hocon:3.6.1") {
        exclude(module: "checker-qual")
        exclude(module: "guava")
    }
    annotationProcessor("org.spongepowered:mixin:0.8")
    annotationProcessor("com.google.code.gson:gson:2.8.6") // Required by Mixin
    annotationProcessor("com.google.guava:guava:28.2-jre") // Required by Mixin
    annotationProcessor("org.ow2.asm:asm-commons:7.3.1") // Required by Mixin
    provided("org.spongepowered:mixin:0.8") {
        transitive = false
    }

    // First Party Mods
    // provided("northerncompass:NorthernCompass:1.14.4:1.0.0")
    // provided("sumsang:Sumsang:1.2.0")

    // Third Party Mods
}

artifacts {
    archives shadowJar
}

compileJava {
    doFirst {
        source = filterJava.outputs
    }
}

jar {
    manifest {
        attributes(
                "MixinConfigs": ""
                        + "mixins.sledgehammer.core.json,"
                        + "mixins.sledgehammer.platform.json"
        )
    }
}

processResources {
    from("LICENSE")
    rename("LICENSE", "LICENSE-${archivesBaseName}")

    from (sourceSets.main.resources.srcDirs) {
        include("META-INF/mods.toml")
        filter(ReplaceTokens, tokens: [version: version])
    }

    exclude("accesstransformer.cfg")
}

reobf {
    shadowJar {
    }
}

shadowJar {
    archiveClassifier.set(null)
    configurations = [project.configurations.shadow]
    exclude("module-info.class")
    relocate("com.typesafe.config", "io.github.lxgaming.sledgehammer.lib.config")
    relocate("ninja.leaping.configurate", "io.github.lxgaming.sledgehammer.lib.configurate")
    relocate("org.checkerframework", "io.github.lxgaming.sledgehammer.lib.checkerframework")
}

test {
    testLogging {
        exceptionFormat = "full"
    }

    useJUnitPlatform()
}

task filterJava(type: Sync) {
    from(sourceSets.main.java)
    into("$buildDir/tmp/$name")

    filter(ReplaceTokens, tokens: [version: version])
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        configurations.archives.allArtifacts.files.each {
            ant.signjar(
                jar: it,
                alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified: project.property("signing.preserveLastModified"),
                tsaurl: project.property("signing.timestampAuthority"),
                digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: " + it.name)

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: " + it.name)
        }
    }
}