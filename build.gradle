buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "gradle"
            url = "https://plugins.gradle.org/m2"
        }
        maven {
            name = "minecraftforge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "spongepowered"
            url = "https://repo.spongepowered.org/repository/maven-public"
        }
    }

    dependencies {
        classpath("gradle.plugin.com.github.johnrengelman:shadow:7.1.2")
        classpath("net.kyori:blossom:1.3.0")
        classpath("net.minecraftforge.gradle:ForgeGradle:5.1.+")
        classpath("org.spongepowered:mixingradle:0.7-SNAPSHOT")
    }
}

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "java"
apply plugin: "java-library"
apply plugin: "net.kyori.blossom"
apply plugin: "net.minecraftforge.gradle"
apply plugin: "org.spongepowered.mixin"
apply plugin: "signing"

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "io.github.lxgaming"
archivesBaseName = "Sledgehammer"
version = "1.16.5-2.0.1"

blossom {
    replaceToken("@version@", version)
}

minecraft {
    accessTransformer(file("src/main/resources/accesstransformer.cfg"))
    mappings(channel: "official", version: "1.16.5")
    runs {
        client = {
            args("--mixin.config", "mixins.sledgehammer.core.json")
            args("--mixin.config", "mixins.sledgehammer.platform.json")
            args("--tweakClass", "org.spongepowered.asm.launch.MixinTweaker")
            properties("forge.logging.console.level": "debug")
            properties("forge.logging.markers": "SCAN,REGISTRIES,REGISTRYDUMP")
            singleInstance(true)
            workingDirectory(project.file("run"))
        }

        server = {
            args("--mixin.config", "mixins.sledgehammer.core.json")
            args("--mixin.config", "mixins.sledgehammer.platform.json")
            args("--tweakClass", "org.spongepowered.asm.launch.MixinTweaker", "nogui")
            properties("forge.logging.console.level": "debug")
            properties("forge.logging.markers": "SCAN,REGISTRIES,REGISTRYDUMP")
            singleInstance(true)
            workingDirectory(project.file("run"))
        }
    }
}

mixin {
    disableRefMapWarning = true
    add(sourceSets.main, "mixins.sledgehammer.refmap.json")
}

configurations {
    compileJar {
        implementation.extendsFrom(compileJar)
    }
}

repositories {
    mavenCentral()
    maven {
        name = "cursemaven"
        url = "https://cursemaven.com/"
        content {
            includeGroup("curse.maven")
        }
        metadataSources {
            artifact()
        }
    }
    maven {
        name = "spongepowered"
        url = "https://repo.spongepowered.org/repository/maven-public"
    }
}

dependencies {
    minecraft("net.minecraftforge:forge:1.16.5-36.2.35")
    compileJar("org.checkerframework:checker-qual:3.22.1")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.7.2")
    compileJar("org.spongepowered:configurate-hocon:4.1.2") {
        exclude(module: "checker-qual")
    }
    annotationProcessor("org.spongepowered:mixin:0.8.4:processor")

    // First Party Mods
    // compileOnly("northerncompass:NorthernCompass:1.14.4:1.0.0")
    // compileOnly("sumsang:Sumsang:1.2.0")

    // Third Party Mods
    compileOnly("curse.maven:cyclops-core-232758:3336467") // Cyclops Core v1.16.5-1.11.7
    compileOnly("curse.maven:integrated-dynamics-236307:3336471") // Integrated Dynamics v1.16.5-1.8.4
}

artifacts {
    archives shadowJar
}

build {
    finalizedBy("signJar")
}

jar {
    archiveClassifier.set("sponge")
    manifest {
        attributes(
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Implementation-Title": "Sledgehammer",
                "Implementation-Vendor": "LX_Gaming",
                "Implementation-Version": "${project.version}",
                "MixinConfigs": ""
                        + "mixins.sledgehammer.core.json,"
                        + "mixins.sledgehammer.integrateddynamicscompat.json,"
                        + "mixins.sledgehammer.platform.json",
                "Specification-Title": "sledgehammer",
                "Specification-Vendor": "LX_Gaming",
                "Specification-Version": "1"
        )
    }
}

processResources {
    duplicatesStrategy(DuplicatesStrategy.INCLUDE)
    from("LICENSE")
    rename("LICENSE", "LICENSE-${archivesBaseName}")

    from (sourceSets.main.resources.srcDirs) {
        include("META-INF/mods.toml")
        expand("version": version)
    }

    exclude("accesstransformer.cfg")
}

reobf {
    shadowJar {
    }
}

shadowJar {
    archiveClassifier.set(null)
    configurations = [project.configurations.compileJar]
    exclude("module-info.class")
    relocate("com.typesafe.config", "io.github.lxgaming.sledgehammer.lib.config")
    relocate("io.leangen.geantyref", "io.github.lxgaming.sledgehammer.lib.geantyref")
    relocate("org.checkerframework", "io.github.lxgaming.sledgehammer.lib.checkerframework")
    relocate("org.spongepowered.configurate", "io.github.lxgaming.sledgehammer.lib.configurate")
}

test {
    testLogging {
        exceptionFormat = "full"
    }

    useJUnitPlatform()
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        configurations.archives.allArtifacts.files.each {
            ant.signjar(
                jar: it,
                alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified: project.property("signing.preserveLastModified"),
                tsaurl: project.property("signing.timestampAuthority"),
                digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: ${it.name}")

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: ${it.name}")
        }
    }
}