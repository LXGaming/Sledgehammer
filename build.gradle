import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

buildscript {
    repositories {
        mavenCentral()
        maven {
            name = "gradle"
            url = "https://plugins.gradle.org/m2"
        }
        maven {
            name = "minecraftforge"
            url = "https://maven.minecraftforge.net/"
        }
        maven {
            name = "spongepowered"
            url = "https://repo.spongepowered.org/repository/maven-public"
        }
    }

    dependencies {
        classpath("gradle.plugin.com.github.johnrengelman:shadow:7.1.2")
        classpath("net.kyori:blossom:1.3.0")
        classpath("net.minecraftforge.gradle:ForgeGradle:5.1.+")
        classpath("org.spongepowered:mixingradle:0.7-SNAPSHOT")
    }
}

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "java"
apply plugin: "java-library"
apply plugin: "net.kyori.blossom"
apply plugin: "net.minecraftforge.gradle"
apply plugin: "org.spongepowered.mixin"
apply plugin: "signing"

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "io.github.lxgaming"
archivesBaseName = "Sledgehammer"
version = "1.12.2-2.0.18"

blossom {
    replaceToken("@version@", version)
}

minecraft {
    accessTransformer(file("src/main/resources/sledgehammer_at.cfg"))
    mappings(channel: "stable", version: "39-1.12")
    runs {
        client = {
            args("--mixin.config", "mixins.sledgehammer.core.json")
            args("--tweakClass", "org.spongepowered.asm.launch.MixinTweaker")
            properties("forge.logging.console.level": "debug")
            properties("forge.logging.markers": "SCAN,REGISTRIES,REGISTRYDUMP")
            singleInstance(true)
            workingDirectory(project.file("run"))
        }

        server = {
            args("--mixin.config", "mixins.sledgehammer.core.json")
            args("--tweakClass", "org.spongepowered.asm.launch.MixinTweaker", "nogui")
            properties("forge.logging.console.level": "debug")
            properties("forge.logging.markers": "SCAN,REGISTRIES,REGISTRYDUMP")
            singleInstance(true)
            workingDirectory(project.file("run"))
        }
    }
}

mixin {
    disableRefMapWarning = true
    add(sourceSets.main, "mixins.sledgehammer.refmap.json")
}

configurations {
    compileJar {
        implementation.extendsFrom(compileJar)
    }
}

repositories {
    mavenCentral()
    maven {
        name = "cursemaven"
        url = "https://cursemaven.com/"
        content {
            includeGroup("curse.maven")
        }
        metadataSources {
            artifact()
        }
    }
    maven {
        name = "spongepowered"
        url = "https://repo.spongepowered.org/repository/maven-public"
    }
}

dependencies {
    minecraft("net.minecraftforge:forge:1.12.2-14.23.5.2860")
    compileJar("org.checkerframework:checker-qual:3.13.0")
    compileJar("org.spongepowered:configurate-hocon:3.7.2") {
        exclude(module: "checker-qual")
        exclude(module: "guava")
        exclude(module: "guice")
    }
    annotationProcessor("org.spongepowered:mixin:0.8.3:processor")
    compileJar("org.spongepowered:mixin:0.8.3")
    testImplementation("org.junit.jupiter:junit-jupiter-engine:5.8.2")

    // Sponge
    annotationProcessor("org.spongepowered:spongecommon:1.12.2-7.3.0:dev")
    compileOnly("org.spongepowered:spongecommon:1.12.2-7.3.0:dev") {
        exclude(module: "configurate-core")
        exclude(module: "configurate-hocon")
        exclude(module: "commons-io")
        exclude(module: "gson")
        exclude(module: "guava")
        exclude(module: "launchwrapper")
        exclude(module: "mixin")
    }
    compileOnly("org.spongepowered:spongeforge:1.12.2-2838-7.3.0:dev") {
        transitive = false
    }
    compileOnly("org.spongepowered:spongevanilla:1.12.2-7.3.0:dev") {
        transitive = false
    }

    // Third Party Mods
    compileOnly("curse.maven:actually-additions-228404:2669943") // Actually Additions v1.12.2-r145
    compileOnly("curse.maven:armor-underwear-mod-310383:2660325") // Armor Underwear Mod v1.12.2-1.0.0
    compileOnly("curse.maven:astral-sorcery-241721:2872629") // Astral Sorcery v1.12.2-1.10.22
    compileOnly("curse.maven:athenaeum-284350:2780353") // Athenaeum v1.12.2-1.17.4
    compileOnly("curse.maven:barrels-drums-storage-more-319404:2708193") // Barrels, Drums, Storage & More v0.0.24
    compileOnly("curse.maven:better-questing-238856:2877468") // Better Questing v3.5.323
    compileOnly("curse.maven:bewitchment-legacy-285439:3133005") // Bewitchment v1.12.2-0.0.22.49
    compileOnly("curse.maven:bibliocraft-228027:2574880") // BiblioCraft v2.4.5
    compileOnly("curse.maven:biomes-o-plenty-220318:2715506") // Biomes O' Plenty v1.12.2-7.0.1.2441-universal
    compileOnly("curse.maven:career-bees-281791:2534481") // Career Bees v0.4.0
    compileOnly("curse.maven:carrots-lib-311327:2660247") // Carrots Library v1.12.2-1.0.0b1
    compileOnly("curse.maven:carry-on-274259:3271178") // Carry On v1.12.2-1.12.4.16
    compileOnly("curse.maven:champions-307152:2849085") // Champions v1.12.2-1.0.11.3
    compileOnly("curse.maven:chest-transporter-78778:2524058") // Chest Transporter v1.12.2-2.8.8
    compileOnly("curse.maven:codechicken-lib-1-8-242818:2779848") // CodeChicken Lib v1.12.2-3.2.3.358-universal
    compileOnly("curse.maven:cyclops-core-232758:3010617") // Cyclops Core v1.12.2-1.6.6
    compileOnly("curse.maven:dank-null-272514:2831353") // /dank/null v1.12.2-1.7.89
    compileOnly("curse.maven:ender-io-64578:2858816") // Ender IO v5.1.55
    compileOnly("curse.maven:ender-storage-1-8-245174:2755787") // Ender Storage v1.12.2-2.4.6.137-universal
    compileOnly("curse.maven:flux-networks-248020:2645165") // Flux Networks v1.12.2-3.0.19
    compileOnly("curse.maven:forestry-59751:2684780") // Forestry v1.12.2-5.8.2.387
    compileOnly("curse.maven:ftb-library-legacy-forge-237167:2985811") // FTB Library v5.4.7.2
    compileOnly("curse.maven:hearth-well-313368:2800056") // Hearth Well v0.5.2
    compileOnly("curse.maven:immersive-engineering-231951:2799143") // Immersive Engineering v0.12-92
    compileOnly("curse.maven:industrial-foregoing-266515:2745321") // Industrial Foregoing v1.12.2-1.12.13-237
    compileOnly("curse.maven:integrated-dynamics-236307:3005731") // Integrated Dynamics v1.12.2-1.1.7
    compileOnly("curse.maven:jetif-303122:2919936") // Just Enough Throwing In Fluids v1.12.2-1.5.2
    compileOnly("curse.maven:journeymap-32274:2888880") // JourneyMap v1.12.2-5.7.0
    compileOnly("curse.maven:kubejs-forge-238086:2823753") // KubeJS v1.12.2-1.1.0.63
    compileOnly("curse.maven:logistics-pipes-232838:2850338") // Logistics Pipes v0.10.2.216
    compileOnly("curse.maven:matteroverdrive-legacy-308192:2699215") // Matter Overdrive v1.12.2-0.7.1.0-universal
    compileOnly("curse.maven:morph-229080:2682821") // Morph v1.12.2-7.1.3
    compileOnly("curse.maven:mowzies-mobs-250498:3048685") // Mowzie's Mobs v1.5.8
    compileOnly("curse.maven:mrtjpcore-229002:2735197") // MrTJPCore v1.12.2-2.1.4.43-universal
    compileOnly("curse.maven:natures-aura-306626:2882138") // Nature's Aura v18.1
    compileOnly("curse.maven:primalcore-247907:2734701") // PrimalCore v1.12.2-0.6.105
    compileOnly("curse.maven:primitive-crafting-302819:2878845") // Primitive Crafting v1.12.2-1.4.0
    compileOnly("curse.maven:primitive-mobs-282415:2658551") // Primitive Mobs v1.2.3a
    compileOnly("curse.maven:project-red-expansion-229048:2734751") // Project Red v1.12.2-4.9.3.116-mechanical
    compileOnly("curse.maven:project-red-integration-229045:2734749") // Project Red v1.12.2-4.9.3.116-integration
    compileOnly("curse.maven:pyrotech-306676:2780601") // Pyrotech v1.12.2-1.3.13
    compileOnly("curse.maven:qmd-362056:3066649") // QMD v0.10.1-1.12.2
    compileOnly("curse.maven:quark-243121:2663450") // Quark vr1.5-145
    compileOnly("curse.maven:random-things-59816:2905241") // Random Things v1.12.2-4.2.7.4
    compileOnly("curse.maven:real-filing-cabinet-253619:2854777") // Real Filing Cabinet v1.12-0.2.0.20
    compileOnly("curse.maven:ruins-structure-spawning-system-227873:2721268") // Ruins
    compileOnly("curse.maven:simple-storage-network-268495:2735704") // Simple Storage Network v1.12.2-1.7.8
    compileOnly("curse.maven:sonar-core-239418:2645156") // Sonar Core v1.12.2-5.0.19
    compileOnly("curse.maven:tesla-core-lib-254602:2891841") // Tesla Core Lib v1.12.2-1.0.17
    compileOnly("curse.maven:thaumic-wonders-316704:2787954") // Thaumic Wonders v1.8.2
    compileOnly("curse.maven:tomb-many-graves-2-262823:2619249") // Tomb Many Graves 2 v1.12-4.2.0
    compileOnly("curse.maven:topography-297878:2700878") // Topography v1.12.2-1.5.1
    compileOnly("curse.maven:vaultopic-early-inventory-management-322730:2858289") // Vaultopic v2.2
}

build {
    finalizedBy("signJar")
}

jar {
    archiveClassifier.set("sponge")
    manifest {
        attributes(
                "FMLCorePlugin": "io.github.lxgaming.sledgehammer.launch.SledgehammerLoadingPlugin",
                "FMLCorePluginContainsFMLMod": true,
                "ForceLoadAsMod": true,
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
                "Implementation-Title": "Sledgehammer",
                "Implementation-Vendor": "LX_Gaming",
                "Implementation-Version": "${project.version}",
                "MixinConfigs": ""
                        + "mixins.sledgehammer.actuallyadditions.json,"
                        + "mixins.sledgehammer.armorunder.json,"
                        + "mixins.sledgehammer.astralsorcery.json,"
                        + "mixins.sledgehammer.bdsandm.json,"
                        + "mixins.sledgehammer.betterquesting.json,"
                        + "mixins.sledgehammer.bewitchment.json,"
                        + "mixins.sledgehammer.bibliocraft.json,"
                        + "mixins.sledgehammer.biomesoplenty.json,"
                        + "mixins.sledgehammer.careerbees.json,"
                        + "mixins.sledgehammer.carryon.json,"
                        + "mixins.sledgehammer.champions.json,"
                        + "mixins.sledgehammer.chesttransporter.json,"
                        + "mixins.sledgehammer.core.json,"
                        + "mixins.sledgehammer.danknull.json,"
                        + "mixins.sledgehammer.enderio.json,"
                        + "mixins.sledgehammer.enderstorage.json,"
                        + "mixins.sledgehammer.fluxnetworks.json,"
                        + "mixins.sledgehammer.forge.json,"
                        + "mixins.sledgehammer.immersiveengineering.json,"
                        + "mixins.sledgehammer.industrialforegoing.json,"
                        + "mixins.sledgehammer.integrateddynamicscompat.json,"
                        + "mixins.sledgehammer.jetif.json,"
                        + "mixins.sledgehammer.journeymap.json,"
                        + "mixins.sledgehammer.kubejs.json,"
                        + "mixins.sledgehammer.logisticspipes.json,"
                        + "mixins.sledgehammer.matteroverdrive.json,"
                        + "mixins.sledgehammer.morph.json,"
                        + "mixins.sledgehammer.mowziesmobs.json,"
                        + "mixins.sledgehammer.naturesaura.json,"
                        + "mixins.sledgehammer.platform.json,"
                        + "mixins.sledgehammer.primitivecrafting.json,"
                        + "mixins.sledgehammer.primitivemobs.json,"
                        + "mixins.sledgehammer.projectred.json,"
                        + "mixins.sledgehammer.pyrotech.json,"
                        + "mixins.sledgehammer.qmd.json,"
                        + "mixins.sledgehammer.quark.json,"
                        + "mixins.sledgehammer.randomthings.json,"
                        + "mixins.sledgehammer.realfilingcabinet.json,"
                        + "mixins.sledgehammer.ruins.json,"
                        + "mixins.sledgehammer.sponge.json,"
                        + "mixins.sledgehammer.storagenetwork.json,"
                        + "mixins.sledgehammer.thaumicwonders.json,"
                        + "mixins.sledgehammer.tombmanygraves.json,"
                        + "mixins.sledgehammer.topography.json,"
                        + "mixins.sledgehammer.vaultopic.json,"
                        + "mixins.sledgehammer.wolforce.json",
                "Specification-Title": "sledgehammer",
                "Specification-Vendor": "LX_Gaming",
                "Specification-Version": "1",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0
        )
    }

    exclude("META-INF/*.DSA")
    exclude("META-INF/*.RSA")
    exclude("LICENSE.txt")
}

processResources {
    from("LICENSE")
    rename("LICENSE", "LICENSE-${archivesBaseName}")

    from (sourceSets.main.resources.srcDirs) {
        include("mcmod.info")
        expand("version": version)
    }

    exclude("sledgehammer_at.cfg")
}

shadowJar {
    archiveClassifier.set(null)
    configurations = [project.configurations.compileJar]
    relocate("com.typesafe.config", "io.github.lxgaming.sledgehammer.lib.config")
    relocate("ninja.leaping.configurate", "io.github.lxgaming.sledgehammer.lib.configurate")
    relocate("org.checkerframework", "io.github.lxgaming.sledgehammer.lib.checkerframework")
}

task thinShadowJar(type: ShadowJar) {
    archiveClassifier.set("thin")
    configurations = shadowJar.configurations
    relocators = shadowJar.relocators

    dependencies {
        exclude(dependency("org.spongepowered:mixin"))
    }

    manifest {
        inheritFrom jar.manifest
    }

    from sourceSets.main.output
}

artifacts {
    archives shadowJar
    archives thinShadowJar
}

reobf {
    shadowJar {}
    thinShadowJar {}
}

test {
    testLogging {
        exceptionFormat = "full"
    }

    useJUnitPlatform()
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        configurations.archives.allArtifacts.files.each {
            ant.signjar(
                jar: it,
                alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified: project.property("signing.preserveLastModified"),
                tsaurl: project.property("signing.timestampAuthority"),
                digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: ${it.name}")

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: ${it.name}")
        }
    }
}