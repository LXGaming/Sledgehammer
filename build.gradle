buildscript {
    repositories {
        jcenter()
        maven {
            name = "minecraftforge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "spongepowered"
            url = "https://repo.spongepowered.org/maven"
        }
    }

    dependencies {
        classpath("net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT")
        classpath("org.spongepowered:mixingradle:0.6-SNAPSHOT")
    }
}

apply plugin: "java"
apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "org.spongepowered.mixin"
apply plugin: "signing"

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "io.github.lxgaming"
archivesBaseName = "Sledgehammer"
version = "1.1.0-1.12.2"

minecraft {
    version = "1.12.2-14.23.3.2655"
    runDir = "run"
    mappings = "snapshot_20171003"
    makeObfSourceJar = false
}

mixin {
    defaultObfuscationEnv = searge
    disableRefMapWarning = true
    add(sourceSets.main, "mixins.sledgehammer.refmap.json")
}

configurations {
    provided {
        compile.extendsFrom(provided)
    }

    build.dependsOn("signJar")
}

repositories {
    jcenter()
    maven {
        name = "spongepowered"
        url = "https://repo.spongepowered.org/maven"
    }
}

dependencies {
    annotationProcessor("org.spongepowered:spongecommon:7.1.0-SNAPSHOT:dev")
    provided("org.spongepowered:spongecommon:7.1.0-SNAPSHOT:dev") {
        exclude(module: "commons-io")
        exclude(module: "gson")
        exclude(module: "guava")
        exclude(module: "launchwrapper")
    }
}

jar {
    manifest {
        attributes(
                "FMLCorePluginContainsFMLMod": true,
                "ForceLoadAsMod": true,
                "MixinConfigs": "mixins.sledgehammer.core.json,mixins.sledgehammer.forge.json",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0
        )
    }

    from {
        (configurations.compile - configurations.provided).collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }

    exclude("dummyThing")
}

processResources {
    from("LICENSE")
    rename("LICENSE", "LICENSE-" + archivesBaseName)

    from (sourceSets.main.resources.srcDirs) {
        include("mcmod.info")
        expand("version": version, "mcversion": minecraft.version)
    }
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        jar.outputs.files.each {
            ant.signjar(
                jar: it,
                alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified: project.property("signing.preserveLastModified"),
                tsaurl: project.property("signing.timestampAuthority"),
                digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: " + it.name)

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: " + it.name)
        }
    }
}