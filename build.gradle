buildscript {
    repositories {
        jcenter()
        maven {
            name = "minecraftforge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "spongepowered"
            url = "https://repo.spongepowered.org/maven"
        }
    }

    dependencies {
        classpath("com.github.jengelman.gradle.plugins:shadow:4.0.4")
        classpath("net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT")
        classpath("org.spongepowered:mixingradle:0.6-SNAPSHOT")
    }
}

apply plugin: "com.github.johnrengelman.shadow"
apply plugin: "java"
apply plugin: "net.minecraftforge.gradle.forge"
apply plugin: "org.spongepowered.mixin"
apply plugin: "signing"

sourceCompatibility = 1.8
targetCompatibility = 1.8

group = "io.github.lxgaming"
archivesBaseName = "Sledgehammer"
version = "1.12.2-1.5.1"

minecraft {
    version = "1.12.2-14.23.5.2838"
    runDir = "run"
    mappings = "stable_39"
    makeObfSourceJar = false
}

mixin {
    defaultObfuscationEnv = searge
    disableRefMapWarning = true
    add(sourceSets.main, "mixins.sledgehammer.refmap.json")
}

configurations {
    provided {
        compile.extendsFrom(provided)
    }

    build.dependsOn("signJar")
    jar.classifier = "sponge"
}

repositories {
    jcenter()
    maven {
        name = "chickenbones"
        url = "http://chickenbones.net/maven"
    }
    maven {
        name = "lxgaming"
        url = "https://lxgaming.github.io/maven"
    }
    maven {
        name = "curseforge"
        url = "https://minecraft.curseforge.com/api/maven"
    }
    maven {
        name = "spongepowered"
        url = "https://repo.spongepowered.org/maven"
    }
}

dependencies {
    testCompile("org.junit.jupiter:junit-jupiter-engine:5.5.0")
    shadow("org.spongepowered:configurate-hocon:3.6.1") {
        exclude(module: "guava")
    }
    shadow("org.spongepowered:mixin:0.7.11-SNAPSHOT") {
        transitive = false
    }
    annotationProcessor("org.spongepowered:spongecommon:1.12.2-7.1.7-SNAPSHOT:dev")
    provided("org.spongepowered:spongecommon:1.12.2-7.1.7-SNAPSHOT:dev") {
        exclude(module: "configurate-core")
        exclude(module: "configurate-hocon")
        exclude(module: "commons-io")
        exclude(module: "gson")
        exclude(module: "guava")
        exclude(module: "launchwrapper")
        exclude(module: "mixin")
    }
    provided("org.spongepowered:spongeforge:1.12.2-2838-7.1.7-RC3848:dev") {
        transitive = false
    }
    provided("org.spongepowered:spongevanilla:1.12.2-7.1.7-RC243:dev") {
        transitive = false
    }
    provided("actually-additions:ActuallyAdditions:1.12.2:r145")
    provided("immersive-engineering:ImmersiveEngineering:0.12:89")
    provided("matteroverdrive:MatterOverdrive-1.12.2:0.7.1.0:universal")
    provided("mrtjp:ProjectRed:1.12.2-4.9.1.92:mechanical") {
        exclude(module: "jei_1.12.2")
    }
    provided("primalcore:PrimalCore:1.12.2:0.6.51")
    provided("quark:Quark:r1.5:145")
    provided("reliquary-v1-3:Reliquary:1.12.2:1.3.4.786")
    provided("ruins-structure-spawning-system:Ruins:1.12.2")
    provided("tomb-many-graves-2:TombManyGraves:1.12:4.2.0")
    provided("topography:Topography:1.12.2:1.5.1")
    provided("tschipp:carryon:1.12.1")
}

test {
    testLogging {
        exceptionFormat = "full"
        showStandardStreams = true
    }
    
    useJUnitPlatform()
}

shadowJar {
    classifier = null
    configurations = [project.configurations.shadow]
    relocate("com.typesafe.config", "io.github.lxgaming.sledgehammer.lib.config")
    relocate("ninja.leaping.configurate", "io.github.lxgaming.sledgehammer.lib.configurate")
    relocate("org.checkerframework", "io.github.lxgaming.sledgehammer.lib.checkerframework")
}

reobf {
    jar {
        mappingType = "SEARGE"
    }

    shadowJar {
        mappingType = "SEARGE"
    }
}

jar {
    manifest {
        attributes(
                "FMLCorePlugin": "io.github.lxgaming.sledgehammer.launch.SledgehammerLoadingPlugin",
                "FMLCorePluginContainsFMLMod": true,
                "ForceLoadAsMod": true,
                "MixinConfigs": ""
                        + "mixins.sledgehammer.actuallyadditions.json,"
                        + "mixins.sledgehammer.carryon.json,"
                        + "mixins.sledgehammer.core.json,"
                        + "mixins.sledgehammer.forge.json,"
                        + "mixins.sledgehammer.immersiveengineering.json,"
                        + "mixins.sledgehammer.matteroverdrive.json,"
                        + "mixins.sledgehammer.platform.json,"
                        + "mixins.sledgehammer.projectred.json,"
                        + "mixins.sledgehammer.quark.json,"
                        + "mixins.sledgehammer.ruins.json,"
                        + "mixins.sledgehammer.sponge.json,"
                        + "mixins.sledgehammer.tombmanygraves.json,"
                        + "mixins.sledgehammer.topography.json,"
                        + "mixins.sledgehammer.xreliquary.json",
                "TweakClass": "org.spongepowered.asm.launch.MixinTweaker",
                "TweakOrder": 0
        )
    }

    from {
        (configurations.compile - configurations.provided).findAll({
            it.isDirectory() || it.name.endsWith(".jar")
        }).collect({
            it.isDirectory() ? it : zipTree(it)
        })
    }

    exclude("META-INF/*.DSA")
    exclude("META-INF/*.RSA")
    exclude("dummyThing")
    exclude("LICENSE.txt")
}

processResources {
    from("LICENSE")
    rename("LICENSE", "LICENSE-" + archivesBaseName)

    from (sourceSets.main.resources.srcDirs) {
        include("mcmod.info")
        expand("version": version, "mcversion": minecraft.version)
    }
}

artifacts {
    archives shadowJar
}

task signJar {
    doFirst {
        if (!project.hasProperty("signing.keyStorePath") || !project.hasProperty("signing.secretKeyRingFile")) {
            project.logger.warn("========== [WARNING] ==========")
            project.logger.warn("")
            project.logger.warn("   This build is not signed!   ")
            project.logger.warn("")
            project.logger.warn("========== [WARNING] ==========")
            throw new StopExecutionException()
        }
    }

    doLast {
        configurations.archives.allArtifacts.files.each {
            ant.signjar(
                jar: it,
                alias: project.property("signing.alias"),
                storepass: project.property("signing.keyStorePassword"),
                keystore: project.property("signing.keyStorePath"),
                keypass: project.property("signing.keyStorePassword"),
                preservelastmodified: project.property("signing.preserveLastModified"),
                tsaurl: project.property("signing.timestampAuthority"),
                digestalg: project.property("signing.digestAlgorithm")
            )
            project.logger.lifecycle("JAR Signed: " + it.name)

            signing.sign(it)
            project.logger.lifecycle("PGP Signed: " + it.name)
        }
    }
}